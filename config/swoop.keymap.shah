#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "mouse.dtsi"

// Layer definitions
#define LYDWARF 0
#define LYQWERTY 1
#define LYNAV 2
#define LYMEDIA 3
#define LYNUM 4
#define LYSYM 5
#define LYFN 6
#define LYMOUSE 7
#define LYREPORT 8
#define LYNUMR 9

// Key sides
#define KEYS_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 
#define KEYS_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_LEFT_THUMB 30 31 32
#define KEYS_RIGHT_THUMB 33 34 35

// Tidy keys
#define XXX &none
#define ___ &trans

/ {
	behaviors {

		hml: homerow-mod-left {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MOD_LEFT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			global-quick-tap-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_RIGHT KEYS_RIGHT_THUMB KEYS_LEFT_THUMB>;
			hold-trigger-on-release;
		};

		hmr: homerow-mod-right {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MOD_RIGHT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			global-quick-tap-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_LEFT KEYS_RIGHT_THUMB KEYS_LEFT_THUMB>;
			hold-trigger-on-release;
		};

		hms: homerow-mod-short {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MOD_SHORT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			bindings = <&kp>, <&kp>;
		};

		tlt: thumb-layer-tap {
			compatible = "zmk,behavior-hold-tap";
			label = "THUMB_LAYER_TAP";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			global-quick-tap-ms = <150>;
			bindings = <&mo>, <&kp>;
		};

		alttab: swapper-alt-tab {
			compatible = "zmk,behavior-tri-state";
			label = "SWAPPER_ALT_TAB";
			#binding-cells = <0>;
			bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
			ignored-key-positions = <2>;
		};

		ctrltab: swapper-ctrl-tab {
			compatible = "zmk,behavior-tri-state";
			label = "SWAPPER_CTRL_TAB";
			#binding-cells = <0>;
			bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
			ignored-key-positions = <2>;
		};
		
		numword: number-word {
			compatible = "zmk,behavior-caps-word";
			label = "NUMBER_WORD";
			#binding-cells = <0>;
			layers = <LYNUMR>;
			continue-list = <BACKSPACE DELETE DOT COMMA FSLH BSLH>;
			ignore-numbers;
		};

	};

	combos {
		compatible = "zmk,combos";
		
		combo-reporting {
			timeout-ms = <50>;
			global-quick-tap-ms = <150>;
			key-positions = <2 3>;
			layers = <LYDWARF LYQWERTY LYREPORT>;
			bindings = <&tog LYREPORT>;
		};

		combo-numword {
			timeout-ms = <50>;
			global-quick-tap-ms = <150>;
			key-positions = <6 7>;
			layers = <LYDWARF LYQWERTY LYNUMR>;
			bindings = <&numword>;
		};
		
	};
	
	macros {

		dictation_macro: dictation_macro {
			label = "DICTATION_MACRO";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <200>;
			tap-ms = <200>;
			bindings
				= <&macro_press &kp LCTRL>
				, <&macro_tap &kp GRAVE>
				, <&macro_release &kp LCTRL>
				;
		};

		lock_lynav: lock_lynav {
			label = "lock_lynav";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&macro_tap &to LYDWARF &to LYNAV>;
		};

		lock_lymedia: lock_lymedia {
			label = "lock_lymedia";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&macro_tap &to LYDWARF &to LYMEDIA>;
		};

		lock_lynum: lock_lynum {
			label = "lock_lynum";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&macro_tap &to LYDWARF &to LYNUM>;
		};

		lock_lysym: lock_lysym {
			label = "lock_lysym";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&macro_tap &to LYDWARF &to LYSYM>;
		};

		lock_lyfn: lock_lyfn {
			label = "lock_lyfn";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&macro_tap &to LYDWARF &to LYFN>;
		};

		lock_lymouse: lock_lymouse {
			label = "lock_lymouse";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&macro_tap &to LYDWARF &to LYMOUSE>;
		};

	};
	
	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
			label = "Base";
			bindings = <
			&kp F &kp L &kp H &kp D &kp V           						&kp Z &kp G  &kp O &kp U &kp DOT 
			&hml LGUI S &hml LALT R &hml LSHIFT N &hml LCTRL T &kp M        &kp P &hmr RCTRL Y &hmr RSHIFT E &hmr RALT I &hmr RGUI A
			&kp X &kp J &kp B &kp K &kp Q           						&kp C &kp W &kp SQT &kp COMMA &kp SEMICOLON
			&tlt LYFN DELETE &tlt LYNUM BACKSPACE &tlt LYSYM ENTER 			&tlt LYMOUSE TAB &tlt LYNAV SPACE &tlt LYMEDIA ESC 			
			>;
		};

		qwerty_layer {
			label = "QWERTY";
			bindings = <
			&kp Q &kp W &kp E &kp R &kp T           						&kp Y &kp U  &kp I &kp O &kp P 
			&hml LGUI A &hml LALT S &hml LSHIFT D &hml LCTRL F &kp G        &kp H &hmr RCTRL J &hmr RSHIFT K &hmr RALT L &hmr RGUI SEMICOLON
			&kp Z &kp X &kp C &kp V &kp B           						&kp N &kp M &kp COMMA &kp DOT &kp SQT
			&tlt LYFN DELETE &tlt LYNUM BACKSPACE &tlt LYSYM ENTER 			&tlt LYMOUSE TAB &tlt LYNAV SPACE &tlt LYMEDIA ESC
			>;
		};

		navigation_layer {
			label = "Navigation";
			bindings = <
			&kp HOME &kp PG_UP &kp PG_DN &kp END &numword			XXX &to LYDWARF &to LYQWERTY &to LYREPORT XXX
			&kp LEFT &kp UP &kp DOWN &kp RIGHT &caps_word 			XXX &kp RCTRL &kp RSHIFT &kp RALT &kp RGUI
			&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) &kp CAPS		XXX &to LYNUM &lock_lynav XXX XXX
			&kp DELETE &kp BACKSPACE &kp ENTER						___ ___ ___
			>;
		};

		media_layer {
			label = "Media";
			bindings = <
			XXX &kp C_BRI_UP &kp C_BRI_DN XXX XXX										XXX &to LYDWARF &to LYQWERTY &to LYREPORT XXX
			&kp C_PREVIOUS &kp C_VOL_UP &kp C_VOLUME_DOWN &kp C_NEXT &out OUT_TOG		XXX &kp RCTRL &kp RSHIFT &kp RALT &kp RGUI
			&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3	&bt BT_CLR				XXX &to LYFN &lock_lymedia XXX XXX
			&kp C_STOP &kp C_PLAY_PAUSE &kp C_MUTE										___ ___ ___
			>;
		};

		number_layer {
			label = "Number";
			bindings = <
			XXX &to LYREPORT &to LYQWERTY &to LYDWARF XXX	&kp LBKT &kp N7 &kp N8 &kp N9 &kp RBKT
			&kp LGUI &kp LALT &kp LSHIFT &kp LCTRL XXX		&kp FSLH &kp N4 &kp N5 &kp N6 &kp BSLH
			XXX XXX &lock_lynum &to LYNAV XXX				&kp GRAVE &kp N1 &kp N2 &kp N3 &kp EQUAL
			___ ___ ___										&kp MINUS &kp N0 &kp DOT
			>;
		};

		symbol_layer {
			label = "Symbol";
			bindings = <
			XXX &to LYREPORT &to LYQWERTY &to LYDWARF XXX	&kp LBRC &kp AMPERSAND &kp STAR &kp LPAR &kp RBRC
			&kp LGUI &kp LALT &kp LSHIFT &kp LCTRL XXX		&kp QUESTION &kp DOLLAR &kp PERCENT &kp CARET &kp PIPE
			XXX XXX &lock_lysym &to LYMOUSE XXX				&kp TILDE &kp EXCL &kp AT &kp HASH &kp PLUS
			___ ___ ___										&kp UNDERSCORE &kp RPAR &kp LPAR
			>;
		};

		function_layer {
			label = "Function";
			bindings = <
			XXX &to LYREPORT &to LYQWERTY &to LYDWARF XXX	&kp PRINTSCREEN &kp F1 &kp F2 &kp F3 &kp F4
			&kp LGUI &kp LALT &kp LSHIFT &kp LCTRL XXX		&kp SCROLLLOCK &kp F5 &kp F6 &kp F7 &kp F8
			XXX XXX &lock_lyfn &to LYMEDIA XXX				&kp PAUSE_BREAK &kp F9 &kp F10 &kp F11 &kp F12
			___ ___ ___										&kp TAB &kp SPACE &kp K_APP 
			>;
		};

		mouse_layer {
			label = "Mouse";
			bindings = <
			XXX &ctrltab &kp LS(TAB) &alttab XXX	XXX &to LYDWARF &to LYQWERTY &to LYREPORT XXX
			U_MS_L U_MS_U U_MS_D U_MS_R XXX			XXX &kp RCTRL &kp RSHIFT &kp RALT &kp RGUI
			U_WH_L U_WH_U U_WH_D U_WH_R XXX			XXX &to LYSYM &lock_lymouse XXX XXX
			U_BTN3 U_BTN1 U_BTN2					___ ___ ___
			>;
		};

		reporting_layer {
			label = "Reporting";
			bindings = <
			&kp F &kp L &kp H &kp D &kp ESC										___ ___ ___ ___ ___
			&hms LGUI N1 &hms LALT N2 &hms LSHIFT N3 &hms LCTRL N4 &kp N5		___ ___ ___ ___ ___
			&kp N6 &kp N7 &kp N8 &kp N9 &kp N0									___ ___ ___ ___ ___
			&kp DELETE &dictation_macro &tog LYREPORT 							___ ___ ___
			>;
		};

		number_right_layer {
			label = "Number right";
			bindings = <
			___ ___ ___ ___ ___			&kp FSLH &kp N7 &kp N8 &kp N9 &kp BSLH
			___ ___ ___ ___ ___			&kp COMMA &kp N4 &kp N5 &kp N6 &kp DOT
			___ ___ ___ ___ ___			&numword &kp N1 &kp N2 &kp N3 &kp ENTER
			___ ___ ___					&kp BACKSPACE &kp N0 &kp DELETE
			>;
		};

/*			
			XXX XXX XXX XXX XXX			XXX XXX XXX XXX XXX
			XXX XXX XXX XXX XXX			XXX XXX XXX XXX XXX
			XXX XXX XXX XXX XXX			XXX XXX XXX XXX XXX
			___ ___ ___					___ ___ ___
*/

	};
};
