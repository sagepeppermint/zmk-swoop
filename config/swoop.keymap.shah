#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "mouse.dtsi"

// Layer definitions
#define LYDWARF 0
#define LYQWERTY 1
#define LYNAV 2
#define LYSYM 3
#define LYNUM 4
#define LYFN 5
#define LYREPORT 6

// Key sides
#define KEYS_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 
#define KEYS_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_LEFT_THUMB 30 31 32
#define KEYS_RIGHT_THUMB 33 34 35

// Tidy keys
#define XXX &none
#define ___ &trans

/ {
	behaviors {

		hml: homerow-mod-left {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MOD_LEFT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			global-quick-tap-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_RIGHT KEYS_RIGHT_THUMB>;
			hold-trigger-on-release;
		};

		hmr: homerow-mod-right {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MOD_RIGHT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			global-quick-tap-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_LEFT KEYS_LEFT_THUMB>;
			hold-trigger-on-release;
		};

		tlt: thumb-layer-tap {
			compatible = "zmk,behavior-hold-tap";
			label = "THUMB_LAYER_TAP";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			global-quick-tap-ms = <150>;
			bindings = <&mo>, <&kp>;
		};

		// capsword: 	edit-caps-word {
		// 	compatible = "zmk,behavior-caps-word";
		// 	label = "CAPS_WORD";
		// 	#binding-cells = <0>;
        //                 mods = <MOD_LSFT>;
		// 	continue-list = <UNDERSCORE BACKSPACE DELETE FSLH>;
        //                 ignore-alphas;
        //                 ignore-numbers;
        //                 ignore-modifiers;
		// };

		// numword: edit-number-word {
		// 	compatible = "zmk,behavior-caps-word";
		// 	label = "NUMBER_WORD";
		// 	#binding-cells = <0>;
		// 	layers = <LYNUM>;
		// 	continue-list = <BACKSPACE DELETE DOT COMMA FSLH BSLH>;
		// 	ignore-numbers;
		// };

		alttab: swapper-alt-tab {
			compatible = "zmk,behavior-tri-state";
			label = "SWAPPER_ALT_TAB";
			#binding-cells = <0>;
			bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
			ignored-key-positions = <22>;
		};

		ctrltab: swapper-ctrl-tab {
			compatible = "zmk,behavior-tri-state";
			label = "SWAPPER_CTRL_TAB";
			#binding-cells = <0>;
			bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
			ignored-key-positions = <22>;
		};

		// guitab: swapper-gui-tab {
		// 	compatible = "zmk,behavior-tri-state";
		// 	label = "SWAPPER_GUI_TAB";
		// 	#binding-cells = <0>;
		// 	bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
		// 	ignored-key-positions = <22>;
		// };
		
	};

	// macros {

	// 	dictation_macro: dictationmacro {
	// 		label = "DICTATION_MACRO";
	// 		compatible = "zmk,behavior-macro";
	// 		#binding-cells = <0>;
	// 		wait-ms = <200>;
	// 		tap-ms = <200>;
	// 		bindings
	// 			= <&macro_press &kp LCTRL>
	// 			, <&macro_tap &kp GRAVE>
	// 			, <&macro_release &kp LCTRL>
	// 			;
	// 	};

	// };
	
	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
			label = "Base";
			bindings = <
			&kp F &kp L &kp H &kp D &kp V													&kp Z &kp G &kp O &kp U &kp DOT 
			&hml LGUI S &hml LALT R &hml LSHIFT N &hml LCTRL T &kp M						&kp P &hmr RCTRL Y &hmr RSHIFT E &hmr RALT I &hmr RGUI A
			&kp X &kp J &kp B &kp K &kp Q													&kp C &kp W &kp SQT &kp COMMA &kp SEMICOLON
			&tlt LYFN DELETE &tlt LYNUM BACKSPACE &kp ENTER						&tlt LYSYM TAB &tlt LYNAV SPACE &kp ESC
			>;
		};

		qwerty_layer {
			label = "QWERTY";
			bindings = <
			&kp Q &kp W &kp E &kp R &kp T           										&kp Y &kp U  &kp I &kp O &kp P 
			&hml LGUI A &hml LALT S &hml LSHIFT D &hml LCTRL F &kp G						&kp H &hmr RCTRL J &hmr RSHIFT K &hmr RALT L &hmr RGUI SEMICOLON
			&kp Z &kp X &kp C &kp V &kp B													&kp N &kp M &kp COMMA &kp DOT &kp SQT
			&tlt LYFN DELETE &tlt LYNUM BACKSPACE &tlt LYREPORT ENTER						&tlt LYSYM TAB &tlt LYNAV SPACE &kp ESC
			>;
		};

		navigation_layer {
			label = "Navigation";
			bindings = <
			&kp HOME &kp PG_UP &kp PG_DN &kp END XXX										XXX XXX XXX XXX XXX
			&kp LEFT &kp UP &kp DOWN &kp RIGHT XXX											&kp CAPS &kp RCTRL &kp RSHIFT &kp RALT &kp RGUI
			&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) XXX										XXX XXX XXX XXX XXX
			&kp DELETE &kp BACKSPACE &kp ENTER												___ ___ ___
			>;
		};

		symbol_layer {
			label = "Symbol";
			bindings = <
			&kp LT &kp LBRC &kp LBKT &kp LPAR &kp TILDE										&kp CARET &kp RPAR &kp RBKT &kp RBRC &kp GT
			&kp MINUS &kp STAR &kp EQUAL &kp UNDERSCORE &kp DOLLAR							&kp HASH &sk RCTRL &sk RSHIFT &sk RALT &sk RGUI
			&kp PLUS &kp PIPE &kp AT &kp FSLH &kp PERCENT									&kp GRAVE &kp BSLH &kp AMPERSAND &kp QUESTION &kp EXCLAMATION
			&kp DELETE &kp BACKSPACE &kp ENTER												___ ___ ___
			>;
		};

		number_layer {
			label = "Number";
			bindings = <
			C_MUTE C_VOL_DN C_VOL_UP C_PLAY_PAUSE XXX										&kp FSLH &kp N7 &kp N8 &kp N9 &kp BSLH
			&kp LGUI &kp LALT &kp LSHIFT &kp LCTRL XXX										&kp COMMA &kp N4 &kp N5 &kp N6 &kp DOT
			___ &alttab &kp LS(TAB) &ctrltab XXX											XXX &kp N1 &kp N2 &kp N3 &kp ENTER
			___ ___ ___																		&kp BACKSPACE &kp N0 &kp DELETE
			>;
		};

		function_layer {
			label = "Function";
			bindings = <
			XXX XXX XXX XXX XXX																&kp PRINTSCREEN &kp F1 &kp F2 &kp F3 &kp F4
			&kp LGUI &kp LALT &kp LSHIFT &kp LCTRL &out OUT_TOG								&kp SCROLLLOCK &kp F5 &kp F6 &kp F7 &kp F8
			&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3	&bt BT_CLR					&kp PAUSE_BREAK &kp F9 &kp F10 &kp F11 &kp F12
			___ ___ ___																		&kp TAB &kp SPACE &kp K_APP 
			>;
		};

		// reporting_layer {
		// 	label = "Reporting";
		// 	bindings = <
		// 	&kp ESC &kp TAB ___ ___ ___														___ ___ ___ ___ ___
		// 	&kp N1 &kp N2 &kp N3 &kp N4 &kp N5												___ ___ ___ ___ ___
		// 	&kp N6 &kp N7 &kp N8 &kp N9 &kp N0												___ ___ ___ ___ ___
		// 	___ ___ ___ 																	&kp TAB &kp SPACE &kp ESC
		// 	>;
		// };

/*			
			XXX XXX XXX XXX XXX			XXX XXX XXX XXX XXX
			XXX XXX XXX XXX XXX			XXX XXX XXX XXX XXX
			XXX XXX XXX XXX XXX			XXX XXX XXX XXX XXX
			___ ___ ___					___ ___ ___
*/

	};
};

