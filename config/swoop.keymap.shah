#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "mouse.dtsi"

// Layer definitions
#define LYDWARF 0
#define LYQWERTY 1
#define LYNAV 2
#define LYNUM 3
#define LYSYM 4
#define LYFN 5
#define LYMOUSE 6
#define LYREPORT 7

// Key sides
#define KEYS_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 
#define KEYS_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_LEFT_THUMB 30 31 32
#define KEYS_RIGHT_THUMB 33 34 35

// Tidy keys
#define XXX &none
#define ___ &trans

&sk {  // sticky-key config
    release-after-ms = <1000>;
    quick-release;
    ignore-modifiers;
};

/ {
    behaviors {

        hml: homerow-mod-left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RIGHT KEYS_RIGHT_THUMB>;
            hold-trigger-on-release;
        };

        hmr: homerow-mod-right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LEFT KEYS_LEFT_THUMB>;
            hold-trigger-on-release;
        };

        tlt: thumb-layer-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        bsl: bottom-shift-left {
            compatible = "zmk,behavior-hold-tap";
            label = "BOTTOM_SHIFT_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RIGHT KEYS_RIGHT_THUMB>;
		};

        bsr: bottom-shift-right {
            compatible = "zmk,behavior-hold-tap";
            label = "BOTTOM_SHIFT_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LEFT KEYS_LEFT_THUMB>;
		};

        alttab: swapper-alt-tab {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_ALT_TAB";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <22>;
        };

        ctrltab: swapper-ctrl-tab {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_CTRL_TAB";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
            ignored-key-positions = <22>;
        };

        guitab: swapper-gui-tab {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_GUI_TAB";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <22>;
        };
        
        numberword: number-word {
            compatible = "zmk,behavior-caps-word";
            label = "NUMBER_WORD";
            #binding-cells = <0>;
            layers = <LYNUM>;
            continue-list = <BACKSPACE DOT COMMA FSLH BSLH>;
            ignore-numbers;
        };

        capitalword: capital-word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPITAL_WORD";
            #binding-cells = <0>;
            mods = <MOD_LSFT>;
            continue-list = <UNDERSCORE BACKSPACE FSLH>;
            ignore-alphas;
            ignore-numbers;
            ignore-modifiers;
        };

        spacemorph: space-morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MORPH";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&macro_spcdot>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
		};

        tspacemorph: thumb-space-morph {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_SPACE_MORPH";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&spacemorph>;
		};
    };

    combos {
        compatible = "zmk,combos";

        // left
        combo-escape {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <1 2>;
            layers = <LYDWARF LYQWERTY>;
            bindings = <&kp ESC>;
        };

        combo-capitalword {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <2 3>;
            layers = <LYDWARF LYQWERTY>;
            bindings = <&capitalword>;
		};

		combo-tab {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <21 22>;
            layers = <LYDWARF LYQWERTY>;
            bindings = <&kp TAB>;
		};

        combo-mouse {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <22 23>;
            layers = <LYDWARF LYQWERTY LYMOUSE>;
            bindings = <&tog LYMOUSE>;
		};

        // right
        combo-numword {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <6 7>;
            layers = <LYDWARF LYQWERTY LYNUM>;
            bindings = <&numberword>;
        };

        combo-backspace {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <7 8>;
            layers = <LYDWARF LYQWERTY>;
            bindings = <&kp BACKSPACE>;
		};

        combo-mouse2 {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <26 27>;
            layers = <LYDWARF LYQWERTY LYMOUSE>;
            bindings = <&tog LYMOUSE>;
		};

        combo-del {
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            key-positions = <27 28>;
            layers = <LYDWARF LYQWERTY>;
            bindings = <&kp DEL>;
		};
    };
    
    macros {

        macro_spcdot: macro_spcdot {
            label = "SPACE_DOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp DOT &kp SPACE &sk LSHFT>;
		};

        dictation_macro: dictation_macro {
            label = "DICTATION_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <200>;
            tap-ms = <200>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LCTRL>
                ;
        };

    };
    
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            label = "Base";
            bindings = <
            &kp F &kp L &kp H &kp D &kp V                                   &kp Z &kp G  &kp O &kp U &kp DOT 
            &hml LGUI S &hml LALT R &hml LSHIFT N &hml LCTRL T &kp M        &kp P &hmr RCTRL Y &hmr RSHIFT E &hmr RALT I &hmr RGUI A
            &bsl LSHIFT X &kp J &kp B &kp K &kp Q                           &kp C &kp W &kp SQT &kp COMMA &bsr RSHIFT SEMICOLON
            XXX &tlt LYFN TAB &tlt LYNUM BACKSPACE                          &tspacemorph LYNAV XXX &tlt LYSYM ENTER &mo LYMOUSE
            >;
        };

        qwerty_layer {
            label = "QWERTY";
            bindings = <
            &kp Q &kp W &kp E &kp R &kp T                                   &kp Y &kp U  &kp I &kp O &kp P 
            &hml LGUI A &hml LALT S &hml LSHIFT D &hml LCTRL F &kp G        &kp H &hmr RCTRL J &hmr RSHIFT K &hmr RALT L &hmr RGUI SEMICOLON
            &bsl LSHIFT Z &kp X &kp C &kp V &kp B                           &kp N &kp M &kp COMMA &kp DOT &bsr RSHIFT SQT
            XXX &tlt LYFN TAB &tlt LYNUM BACKSPACE                          &tspacemorph LYNAV XXX &tlt LYSYM ENTER &mo LYMOUSE             
            >;
        };

        navigation_layer {
            label = "Navigation";
            bindings = <
            &kp HOME &kp PG_UP &kp UP &kp PG_DN XXX                         XXX XXX XXX XXX XXX
            &kp END &kp LEFT &kp DOWN &kp RIGHT &kp ESC                     &kp CAPS &sk RCTRL &sk RSHIFT &sk RALT &sk RGUI
            &kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) XXX                     XXX &capitalword &numberword XXX XXX
            ___ &kp TAB &kp BACKSPACE                                       ___ ___ ___
            >;
        };

        number_layer {
            label = "Number";
            bindings = <
            &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_PLAY_PAUSE &kp TAB   XXX &kp N7 &kp N8 &kp N9 XXX
            &sk LGUI &sk LALT &sk LSHIFT &sk LCTRL &kp LG(UP)               XXX &kp N4 &kp N5 &kp N6 &kp N0
            &guitab &alttab &kp LS(TAB) &ctrltab &kp LG(DOWN)               XXX &kp N1 &kp N2 &kp N3 XXX
            ___ ___ ___                                                     &kp SPACE &kp ENTER ___
            >;
        };

        symbol_layer {
            label = "Symbol";
            bindings = <
            &kp LT &kp LBRC &kp LBKT &kp LPAR &kp TILDE                      &kp CARET &kp RPAR &kp RBKT &kp RBRC &kp GT
            &kp MINUS &kp STAR &kp EQUAL &kp UNDERSCORE &kp DOLLAR           &kp HASH &sk RCTRL &sk RSHIFT &sk RALT &sk RGUI
            &kp PLUS &kp PIPE &kp AT &kp FSLH &kp PERCENT                    &kp GRAVE &kp BSLH &kp AMPERSAND &kp QUESTION &kp EXCLAMATION
            ___ ___ ___                                                      ___ ___ ___
            >;
        };

        function_layer {
            label = "Function";
            bindings = <
            &kp C_AL_CALC &kp C_BRI_DN &kp C_BRI_UP &to LYDWARF &to LYQWERTY        &kp PRINTSCREEN &kp F1 &kp F2 &kp F3 &kp F4
            &sk LGUI &sk LALT &sk LSHIFT &sk LCTRL &out OUT_TOG                     &kp SCROLLLOCK &kp F5 &kp F6 &kp F7 &kp F8
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR          &kp PAUSE_BREAK &kp F9 &kp F10 &kp F11 &kp F12
            ___ ___ ___                                                             ___ ___ ___  
            >;
        };

        mouse_layer {
            label = "Mouse";
            bindings = <
            U_WH_L U_WH_U U_MS_U U_WH_D U_WH_R                        ___ ___ ___ ___ ___
            ___ U_MS_L U_MS_D U_MS_R ___                ___ &kp RCTRL &kp RSHIFT &kp RALT &kp RGUI
            ___ ___ ___ ___ ___                       ___ ___ ___ ___ ___
            U_BTN3 U_BTN2 U_BTN1                                             ___ ___ ___
            >;
        };

        reporting_layer {
            label = "Reporting";
            bindings = <
            &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                        ___ ___ ___ ___ ___
            &kp ESC &kp TAB &kp DELETE &dictation_macro ___            ___ ___ ___ ___ ___
            &kp N6 &kp N7 &kp N8 &kp N9 &kp N0                        ___ ___ ___ ___ ___
            ___ ___ ___                                             ___ ___ ___
            >;
        };
    };
};
