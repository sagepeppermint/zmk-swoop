#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "mouse.dtsi"

// Layer definitions   
#define LYDWARF 0
#define LYQWERTY 1
#define LYLNAV 2
#define LYFUN 3
#define LYLNUM 4
#define LYLSYM 5
#define LYRNUM 6
#define LYMOUSE 7
#define LYSCT 8
#define LYCONFIG 9

// Key sides
#define KEYS_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_LEFT_THUMB 30 31 32
#define KEYS_RIGHT_THUMB 33 34 35

// Tidy keys
#define XXX &none
#define ___ &trans

&sk {  // sticky-key config
	release-after-ms = <1000>;
	quick-release;
	ignore-modifiers;
};

/ {
	behaviors {

		hml: homerow-mod-left {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_RIGHT KEYS_RIGHT_THUMB>;
			hold-trigger-on-release;
		};

		hmr: homerow-mod-right {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_LEFT KEYS_LEFT_THUMB>;
			hold-trigger-on-release;
		};

		hll: homerow-layer-left {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <KEYS_RIGHT KEYS_RIGHT_THUMB>;
		};

		hlr: homerow-layer-right {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <KEYS_LEFT KEYS_LEFT_THUMB>;
		};

		tlt: thumb-layer-tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <175>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <0>;
			bindings = <&mo>, <&kp>;
		};

		bsl: bottom-shift-left {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <0>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_RIGHT KEYS_RIGHT_THUMB>;
		};

		bsr: bottom-shift-right {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <0>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_LEFT KEYS_LEFT_THUMB>;
		};

		alttab: swapper-alt-tab {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
			ignored-key-positions = <17>;
		};

		ctrltab: swapper-ctrl-tab {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
			ignored-key-positions = <17>;
		};

		guitab: swapper-gui-tab {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
			ignored-key-positions = <17>;
		};

		numberword: number-word {
			compatible = "zmk,behavior-caps-word";
			#binding-cells = <0>;
			layers = <LYRNUM>;
			continue-list = <BACKSPACE MINUS DOT COMMA FSLH BSLH>;
			ignore-numbers;
			ignore-modifiers;
		};

		capitalword: capital-word {
			compatible = "zmk,behavior-caps-word";
			#binding-cells = <0>;
			mods = <MOD_LSFT>;
			continue-list = <UNDERSCORE BACKSPACE DELETE FSLH>;
						ignore-alphas;
						ignore-numbers;
						ignore-modifiers;
		};

		spacemorph: space-morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp SPACE>, <&macro_spcdot>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		tspacemorph: thumb-space-morph {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <175>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <0>;
			bindings = <&mo>, <&spacemorph>;
		};

	};

	combos {
		compatible = "zmk,combos";

		// left
		combo-esc {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <1 2>;
			layers = <LYDWARF LYQWERTY>;
			bindings = <&kp ESC>;
		};

		combo-capitalword {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <2 3>;
			layers = <LYDWARF LYQWERTY>;
			bindings = <&capitalword>;
		};

		combo-tab {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <21 22>;
			layers = <LYDWARF LYQWERTY>;
			bindings = <&kp TAB>;
		};

		// combo-media {
		// 	timeout-ms = <50>;
		// 	require-prior-idle-ms = <150>;
		// 	key-positions = <22 23>;
		// 	layers = <LYDWARF LYQWERTY LYMEDIA>;
		// 	bindings = <&tog LYMEDIA>;
		// };

		// right
		combo-numword {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <6 7>;
			layers = <LYDWARF LYQWERTY LYRNUM>;
			bindings = <&numberword>;
		};

		combo-backspace {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <7 8>;
			layers = <LYDWARF LYQWERTY>;
			bindings = <&kp BACKSPACE>;
		};

		combo-mouse {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <26 27>;
			layers = <LYDWARF LYQWERTY LYMOUSE>;
			bindings = <&tog LYMOUSE>;
		};

		combo-del {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <27 28>;
			layers = <LYDWARF LYQWERTY>;
			bindings = <&kp DEL>;
		};


	};

	macros {

		macro_spcdot: macro_spcdot {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&macro_tap &kp DOT &kp SPACE &sk LSHFT>;
		};

		// dictation_macro: dictation_macro {
		// 	label = "DICTATION_MACRO";
		// 	compatible = "zmk,behavior-macro";
		// 	#binding-cells = <0>;
		// 	wait-ms = <200>;
		// 	tap-ms = <200>;
		// 	bindings
		// 		= <&macro_press &kp LCTRL>
		// 		, <&macro_tap &kp GRAVE>
		// 		, <&macro_release &kp LCTRL>
		// 		;
		// };
	};


	keymap {
		compatible = "zmk,keymap";

		default_layer {
			// DWARF
			bindings = <
			&kp F &kp L &kp H &kp D &kp V										&kp Z &kp G &kp O &kp U &kp DOT
			&hml LGUI S &hml LALT R &hml LSHIFT N &hml LCTRL T &kp M        	&kp P &hmr RCTRL Y &hmr RSHIFT E &hmr RALT I &hmr RGUI A
			&bsl LSHIFT X &kp J &kp B &hll LYSCT K &kp Q						&kp C &hlr LYSCT W &kp SQT &kp COMMA &bsr RSHIFT SEMICOLON
			&tlt LYCONFIG DELETE &tlt LYFUN ENTER &tlt LYLNAV BACKSPACE  		&tspacemorph LYLNUM XXX &tlt LYLSYM TAB &kp ESC
			>;
		};

		qwerty_layer {
			// QWERTY
			bindings = <
			&kp Q &kp W &kp E &kp R &kp T										&kp Y &kp U  &kp I &kp O &kp P
			&hml LGUI A &hml LALT S &hml LSHIFT D &hml LCTRL F &kp G			&kp H &hmr RCTRL J &hmr RSHIFT K &hmr RALT L &hmr RGUI SEMICOLON
			&bsl LSHIFT Z &kp X &kp C &hll LYSCT V &kp B						&kp N &hlr LYSCT M &kp COMMA &kp DOT &bsr RSHIFT SQT
			&tlt LYCONFIG DELETE &tlt LYFUN ENTER &tlt LYLNAV BACKSPACE  		&tspacemorph LYLNUM XXX &tlt LYLSYM TAB &kp ESC
			>;
		};

		navigation_layer {
			// Left Navigation
			bindings = <
			&kp ESC &kp C_VOL_DN &kp C_VOL_UP &kp C_PLAY_PAUSE &kp C_MUTE		XXX &kp PG_DN &kp UP &kp PG_UP &kp HOME 
			&sk LGUI &sk LALT &sk LSHIFT &sk LCTRL &kp CAPS						XXX &kp LEFT &kp DOWN &kp RIGHT &kp END  
			&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V)	XXX							&kp DEL &kp BACKSPACE &kp TAB &kp ENTER &kp INSERT
			___ ___ ___															&kp SPACE &kp TAB &kp ESC
			>;
		};

		function_layer {
			// Left Function
			bindings = <
			___ ___ ___ ___ ___													&kp PRINTSCREEN &kp F1 &kp F2 &kp F3 &kp F4
			&sk LGUI &sk LALT &sk LSHIFT &sk LCTRL ___							&kp SCROLLLOCK &kp F5 &kp F6 &kp F7 &kp F8
			___ ___ ___ ___ ___													&kp PAUSE_BREAK &kp F9 &kp F10 &kp F11 &kp F12
			___ ___ ___															&kp SPACE &kp TAB &kp ESC
			>;
		};

		number_layer {
			// Right Number
			bindings = <
			&kp LBKT &kp N7 &kp N8 &kp N9 &kp RBKT								___ ___ ___ ___ ___
			&kp FSLH &kp N4 &kp N5 &kp N6 &kp EQUAL								___ &sk RCTRL &sk RSHIFT &sk RALT &sk RGUI
			&kp GRAVE &kp N1 &kp N2 &kp N3 &kp BSLH								&kp DEL &kp BACKSPACE &kp TAB &kp ENTER &kp INSERT
			&kp DOT &kp MINUS &kp N0											___ ___ ___
			>;
		};

		symbol_layer {
			// Right Symbol
			bindings = <
			&kp LBRC &kp AMPERSAND &kp STAR &kp LPAR &kp RBRC					___ ___ ___ ___ ___
			&kp QUESTION &kp DOLLAR &kp PERCENT &kp CARET &kp PLUS				___ &sk RCTRL &sk RSHIFT &sk RALT &sk RGUI
			&kp TILDE &kp EXCL &kp AT &kp HASH &kp PIPE							&kp DEL &kp BACKSPACE &kp TAB &kp ENTER &kp INSERT
			&kp LPAR &kp UNDERSCORE &kp RPAR 									___ ___ ___
			>;
		};

		number_right_layer {
			// Number on Right
			bindings = <
			___ ___ ___ ___ ___													&kp COMMA &kp N7 &kp N8 &kp N9 &kp BSLH
			___ ___ ___ ___ ___													&kp BACKSPACE &kp N4 &kp N5 &kp N6 &kp MINUS
			___ ___ ___ ___ ___													&kp DOT &kp N1 &kp N2 &kp N3 &kp FSLH
			___ ___ ___															&kp N0 &kp ENTER &numberword
			>;
		};

		mouse_layer {
			// Mouse
			bindings = <
			&tog LYMOUSE &tog LYMOUSE &tog LYMOUSE &tog LYMOUSE &tog LYMOUSE	&tog LYMOUSE &tog LYMOUSE &tog LYMOUSE &tog LYMOUSE &tog LYMOUSE
			U_MS_L U_MS_U U_MS_D U_MS_R XXX										XXX U_MS_L U_MS_D U_MS_U U_MS_R
			U_WH_L U_WH_U U_WH_D U_WH_R XXX										XXX U_WH_L U_WH_D U_WH_U U_WH_R
			&mkp MCLK &mkp RCLK &mkp LCLK										&mkp LCLK &mkp RCLK &mkp MCLK
			>;
		};

		shortcut_layer {
			// Shortcut
			bindings = <
			XXX XXX XXX XXX &kp C_BRI_UP										&kp C_BRI_UP XXX XXX XXX XXX
			&kp LGUI &kp LALT &kp LSHIFT &kp LCTRL &kp C_BRI_DN					&kp C_BRI_DN &kp RCTRL &kp RSHIFT &kp RALT &kp RGUI
			&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V)	XXX							XXX &kp LC(V) &kp LC(C) &kp LC(X) &kp LC(Z)
			&mkp MCLK &mkp RCLK &mkp LCLK										&mkp LCLK &mkp RCLK &mkp MCLK
			>;
		};

		config_layer {
			// Config
			bindings = <
			___ ___ ___ ___ ___			XXX &kp C_BRI_DN &kp C_BRI_UP &to LYDWARF &to LYQWERTY
			___ ___ ___ ___ ___			&out OUT_TOG &ctrltab &kp RSHIFT &alttab &guitab
			___ ___ ___ ___ ___			&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3
			___ ___ ___					XXX XXX XXX
			>;
		};

	};
};
